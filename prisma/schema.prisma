generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model clientes {
  id        Int    @id @default(autoincrement())
  nombre    String @db.VarChar(255)
  dni       String @unique @db.VarChar(9)
  direccion String @db.VarChar(100)
  celular   String @db.VarChar(13)
  correo    String @unique @db.VarChar(50)
  condicion String @db.VarChar(20)
}

model ideas {
  id   Int    @id @default(autoincrement())
  foto String @db.VarChar(255)
}

model mensajes {
  id           Int      @id @default(autoincrement())
  nombre       String   @db.VarChar(150)
  celular      String   @db.VarChar(13)
  correo       String   @unique @db.VarChar(50)
  fecha        DateTime @default(now()) @db.Timestamp(6)
  comunicacion String   @db.VarChar(30)
  mensaje      String
  response     String? @db.Text
}

model preguntas {
  id        Int    @id @default(autoincrement())
  pregunta  String @db.Text
  respuesta String @db.Text
}

model promociones {
  id             Int      @id @default(autoincrement())
  titulo         String   @unique @db.VarChar(255)
  descripcion    String
  fecha_inicio   DateTime @db.Date
  fecha_termino  DateTime @db.Date
  imagen_url     String   @db.VarChar(255)
  creado_en      DateTime @default(now()) @db.Timestamp(6)
  creado_por     String   @db.VarChar(100)
  is_active      Boolean
  actualizado_en DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  password     String
  resetToken   String?  // Token de recuperación
  resetExpires DateTime? // Fecha de expiración del token
}

model Producto {
  id              Int                @id @default(autoincrement())
  nombre          String
  descripcion     String?
  precio          Float
  activo          Boolean            @default(true)
  imagenUrl       String?            // Campo para la URL de la imagen del producto
  marcaId         Int
  tipoProductoId  Int
  marca           Marca              @relation(fields: [marcaId], references: [id])
  tipoProducto    TipoProducto       @relation(fields: [tipoProductoId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Marca {
  id        Int         @id @default(autoincrement())
  nombre    String      @unique
  productos Producto[]  // Una marca puede tener múltiples productos
  tipoProductosMarca TipoProductoMarca[] // Relación muchos a muchos con TipoProducto
}

model TipoProducto {
  id        Int         @id @default(autoincrement())
  nombre    String      @unique
  productos Producto[]  // Un tipo de producto puede estar asociado a múltiples productos
  marcas TipoProductoMarca[] // Relación muchos a muchos con Marca
}

model TipoProductoMarca {
  marcaId       Int
  tipoProductoId Int
  marca         Marca        @relation(fields: [marcaId], references: [id])
  tipoProducto  TipoProducto @relation(fields: [tipoProductoId], references: [id])

  @@id([marcaId, tipoProductoId]) // Definir como clave primaria compuesta
}